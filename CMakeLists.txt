SET(PROJECT_NAME DSO)

PROJECT(${PROJECT_NAME})
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

set(BUILD_TYPE Release)

set(EXECUTABLE_OUTPUT_PATH bin)
set(LIBRARY_OUTPUT_PATH lib)
set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

# set boost static multi-thread libraries
#set (BOOST_ROOT ${PROJECT_SOURCE_DIR}/thirdparty/boost_1_66_0)
#set (Boost_NO_BOOST_CMAKE ON)
#set (Boost_USE_STATIC_LIBS ON) 
#set (Boost_USE_MULTITHREADED ON)

# required libraries
find_package(SuiteParse REQUIRED)
find_package(Eigen3 REQUIRED)
#find_package(Boost 1.66.0 REQUIRED COMPONENTS system thread) 
set (Boost_FOUND ON)

# optional libraries
find_package(LibZip QUIET)
#find_package(Pangolin 0.2 QUIET)
#find_package(OpenCV QUIET)
set (Pangolin_FOUND ON)
set (OpenCV_FOUND ON)

# flags
add_definitions("-D__SSE3__")
add_definitions("-DNOMINMAX")
set(CMAKE_CXX_FLAGS_RELEASE "/MT")

if (MSVC)
     set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc")
endif (MSVC)

# Sources files
set(dso_SOURCE_FILES
  ${PROJECT_SOURCE_DIR}/src/FullSystem/FullSystem.cpp
  ${PROJECT_SOURCE_DIR}/src/FullSystem/FullSystemOptimize.cpp
  ${PROJECT_SOURCE_DIR}/src/FullSystem/FullSystemOptPoint.cpp
  ${PROJECT_SOURCE_DIR}/src/FullSystem/FullSystemDebugStuff.cpp
  ${PROJECT_SOURCE_DIR}/src/FullSystem/FullSystemMarginalize.cpp
  ${PROJECT_SOURCE_DIR}/src/FullSystem/Residuals.cpp
  ${PROJECT_SOURCE_DIR}/src/FullSystem/CoarseTracker.cpp
  ${PROJECT_SOURCE_DIR}/src/FullSystem/CoarseInitializer.cpp
  ${PROJECT_SOURCE_DIR}/src/FullSystem/ImmaturePoint.cpp
  ${PROJECT_SOURCE_DIR}/src/FullSystem/HessianBlocks.cpp
  ${PROJECT_SOURCE_DIR}/src/FullSystem/PixelSelector2.cpp
  ${PROJECT_SOURCE_DIR}/src/OptimizationBackend/EnergyFunctional.cpp
  ${PROJECT_SOURCE_DIR}/src/OptimizationBackend/AccumulatedTopHessian.cpp
  ${PROJECT_SOURCE_DIR}/src/OptimizationBackend/AccumulatedSCHessian.cpp
  ${PROJECT_SOURCE_DIR}/src/OptimizationBackend/EnergyFunctionalStructs.cpp
  ${PROJECT_SOURCE_DIR}/src/util/settings.cpp
  ${PROJECT_SOURCE_DIR}/src/util/Undistort.cpp
  ${PROJECT_SOURCE_DIR}/src/util/globalCalib.cpp
  ${PROJECT_SOURCE_DIR}/src/sys/times.cpp
)

include_directories(
  ${PROJECT_SOURCE_DIR}/src
  ${PROJECT_SOURCE_DIR}/thirdparty/Sophus
  ${EIGEN3_INCLUDE_DIR}
) 



# decide if we have pangolin
if (Pangolin_FOUND)
	message("--- found PANGOLIN, compiling dso_pangolin library.")
	#include_directories( ${Pangolin_INCLUDE_DIRS} ) 
	include_directories(${PROJECT_SOURCE_DIR}/thirdparty/Pangolin/include)
	include_directories(${PROJECT_SOURCE_DIR}/thirdparty/Pangolin/build/src/include)
	include_directories(${PROJECT_SOURCE_DIR}/thirdparty/Pangolin/build/external/glew/include)
	set(dso_pangolin_SOURCE_FILES 
	  ${PROJECT_SOURCE_DIR}/src/IOWrapper/Pangolin/KeyFrameDisplay.cpp
	  ${PROJECT_SOURCE_DIR}/src/IOWrapper/Pangolin/PangolinDSOViewer.cpp)
	set(HAS_PANGOLIN 1)
else ()
	message("--- could not find PANGOLIN, not compiling dso_pangolin library.")
	message("    this means there will be no 3D display / GUI available for dso_dataset.")
	set(dso_pangolin_SOURCE_FILES )
	set(HAS_PANGOLIN 0)
endif ()

# decide if we have openCV
if (OpenCV_FOUND)
	message("--- found OpenCV, compiling dso_opencv library.")
	include_directories(${PROJECT_SOURCE_DIR}/thirdparty/opencv/include)
	set(dso_opencv_SOURCE_FILES 
	  ${PROJECT_SOURCE_DIR}/src/IOWrapper/OpenCV/ImageDisplay_OpenCV.cpp
	  ${PROJECT_SOURCE_DIR}/src/IOWrapper/OpenCV/ImageRW_OpenCV.cpp)
	set(HAS_OPENCV 1)
else ()
	message("--- could not find OpenCV, not compiling dso_opencv library.")
	message("    this means there will be no image display, and image read / load functionality.")
	set(dso_opencv_SOURCE_FILES 
	  ${PROJECT_SOURCE_DIR}/src/IOWrapper/ImageDisplay_dummy.cpp
	  ${PROJECT_SOURCE_DIR}/src/IOWrapper/ImageRW_dummy.cpp)
	set(HAS_OPENCV 0)
endif ()

# decide if we have Boost
if (Boost_FOUND)
	message("--- found Boost, compiling dso_boost library.")
	include_directories( ${PROJECT_SOURCE_DIR}/thirdparty/boost_1_66_0 )
	set(dso_boost_SOURCE_FILES 
	  ${PROJECT_SOURCE_DIR}/thirdparty/boost_1_66_0/boost)
	set(HAS_BOOST 1)
else ()
	message("--- could not find Boost, not compiling dso_boost library.")
	set(HAS_BOOST 0)
endif ()

# decide if we have ziplib.
if (LIBZIP_LIBRARY)
	message("--- found ziplib (${LIBZIP_VERSION}), compiling with zip capability.")
	add_definitions(-DHAS_ZIPLIB=1)
	include_directories( ${LIBZIP_INCLUDE_DIR_ZIP} ${LIBZIP_INCLUDE_DIR_ZIPCONF} ) 
else()
	message("--- not found ziplib (${LIBZIP_LIBRARY}), compiling without zip capability.")
	set(LIBZIP_LIBRARY "")
endif()

# Pangolin externals
set(PANGOLIN_EXTERNAL_LIB_DIR ${PROJECT_SOURCE_DIR}/thirdparty/Pangolin/build/external)
#include_directories(${PANGOLIN_EXTERNAL_LIB_DIR}/glew/include)

# compile main library.
include_directories( ${CSPARSE_INCLUDE_DIR} ${CHOLMOD_INCLUDE_DIR}) 
#link_directories(${PANGOLIN_EXTERNAL_LIB_DIR}/glew/lib)
add_library(dso ${dso_SOURCE_FILES} ${dso_opencv_SOURCE_FILES} ${dso_pangolin_SOURCE_FILES} ${dso_boost_SOURCE_FILES})
#target_link_libraries(dso debug ${PANGOLIN_EXTERNAL_LIB_DIR}/glew/lib/glewd.lib optimized ${PANGOLIN_EXTERNAL_LIB_DIR}/glew/lib/glew.lib)

#set_property( TARGET dso APPEND_STRING PROPERTY COMPILE_FLAGS -Wall )


# build main executable (only if we have both OpenCV Pangolin and Boost)
if (OpenCV_FOUND AND Pangolin_FOUND AND Boost_FOUND)
	message("--- compiling dso_dataset.")
	
	link_directories(C:/boost_1_66_0/lib32-msvc-14.1)
	link_directories(${PROJECT_SOURCE_DIR}/thirdparty/opencv/x86/vc14/lib)
	link_directories(${PROJECT_SOURCE_DIR}/thirdparty/Pangolin/build/src/)
	link_directories(${PANGOLIN_EXTERNAL_LIB_DIR}/glew/lib)
	link_directories(${PANGOLIN_EXTERNAL_LIB_DIR}/libpng/lib)
	link_directories(${PANGOLIN_EXTERNAL_LIB_DIR}/libjpeg/lib)
	link_directories(C:/libzip-win-build/build-VS2017/)
	add_executable(dso_dataset ${PROJECT_SOURCE_DIR}/src/main_dso_pangolin.cpp )
	target_link_libraries(dso_dataset dso glu32.lib opengl32.lib)  # Added
	set(DLL_DIRECTORY ${PROJECT_SOURCE_DIR}/thirdparty/Pangolin/build/external/libpng/bin ${PROJECT_SOURCE_DIR}/thirdparty/Pangolin/build/external/zlib/bin ${PROJECT_SOURCE_DIR}/thirdparty/opencv/x86/vc14/bin)
    #target_link_libraries(dso_dataset dso boost_system cxsparse ${BOOST_THREAD_LIBRARY} ${LIBZIP_LIBRARY} ${Pangolin_LIBRARIES} ${OpenCV_LIBS})

else()
	message("--- not building dso_dataset, since either don't have openCV or Pangolin.")
endif()

